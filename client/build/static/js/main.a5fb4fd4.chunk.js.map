{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/helpers.js","components/CartItem/index.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","CartItem","item","className","src","image","alt","name","price","placeholder","onChange","target","parseInt","role","aria-label","onClick","removeFromCart","ProductItem","quantity","to","count","pluralize","itemInCart","find","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","cartItem","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a5fb4fd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import { useReducer } from 'react';\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from './actions';\n  \n\nexport const reducer = (state, action) => {\n    switch(action.type) {\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            }\n            case ADD_MULTIPLE_TO_CART:\n                return {\n                  ...state,\n                  cart: [...state.cart, ...action.products],\n                };\n            case REMOVE_FROM_CART:\n                let newState = state.cart.filter(product => {\n                    return product._id !== action._id;\n                });\n\n                return {\n                    ...state,\n                    cartOpen: newState.length > 0,\n                 \n                      cart: newState\n                };\n\n                case UPDATE_CART_QUANTITY:\n                    return {\n                      ...state,\n                      cartOpen: true,\n                      cart: state.cart.map(product => {\n                        if (action._id === product._id) {\n                          product.purchaseQuantity = action.purchaseQuantity;\n                        }\n                        return product;\n                      })\n                    };\n\n            case CLEAR_CART:\n                return {\n                    ...state,\n                    cartOpen: false,\n                    cart:[]\n                };\n\n            case TOGGLE_CART:\n                return {\n                    ...state,\n                    cartOpen: !state.cartOpen\n                }\n            default:\n                return state;\n    }\n};\n\nexport function useProductReducer(initialState) {\n    return useReducer(reducer, initialState)\n;}","export const UPDATE_PRODUCTS = 'UPDATE_PRODUCTS';\nexport const UPDATE_CATEGORIES = 'UPDATE_CATEGORIES';\nexport const UPDATE_CURRENT_CATEGORY = 'UPDATE_CURRENT_CATEGORY';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","import React, { createContext, useContext } from 'react';\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value=[], ...props}) => {\n    const [state, dispatch] = useProductReducer({\n        products: [],\n        cart: [],\n        cartOpen: false,\n        categories: [],\n        currentCategory: ''\n    });\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n}\n\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n}\n\nexport { StoreProvider, useStoreContext };","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold refrence to the database, transaction, and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      //create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the 'db' variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if theres any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id)\n          break;\n        default:\n          console.log('No valid method!');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\n","import React from 'react';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id,\n    });\n    idbPromise('cart', 'delete', {...item})\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id,\n      });\n      idbPromise('cart', 'delete', {...item});\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value),\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value)})\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt=\"\" />\n      </div>\n      <div>\n        <div>\n          {item.name}, ${item.price}\n        </div>\n        <div>\n          <span>Qty:</span>\n          <input type=\"number\" placeholder=\"1\" value={item.purchaseQuantity} onChange={onChange} />\n          <span role=\"img\" aria-label=\"trash\" onClick={() => removeFromCart(item)}>\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { pluralize } from '../../utils/helpers';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport CartItem from '../CartItem';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductItem(item) {\n  const [state, dispatch] = useStoreContext();\n\n  const { image, name, _id, price, quantity } = item;\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((CartItem) => CartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      })\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', {...item, purchaseQuantity: 1})\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize('item', quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { idbPromise } from '../../utils/helpers';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // if there's data to be stored\n    if(data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product)\n      });\n\n      // add else to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set globale state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        })\n      })\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if(!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id ===currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { idbPromise} from '../../utils/helpers';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from '../../utils/GlobalState';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if(categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      })\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category)\n      })\n    }  else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        })\n      })\n    }\n  }, [categoryData, loading, dispatch])\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n  \n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client'\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if(data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session})\n      })\n    }\n  }, [data])\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {Auth.loggedIn() ? <button onClick={submitCheckout}>Checkout</button> : <span>(log in to check out)</span>}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\"\n\nconst Home = () => {\n  \n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nimport { useStoreContext } from '../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\n\nimport Cart from '../components/Cart';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'push', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDb\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    // upon removal from cart, delete the item from IndexedDb using the 'currentProduct._id' to locate what to remove\n    idbPromise('cart', 'delete', {...currentProduct})\n  \n  }\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price} <button onClick={addToCart}>Add to Cart</button>\n            <button disabled={!cart.find((p) => p._id === currentProduct._id)} onClick={removeFromCart}>\n              Remove from Cart\n            </button>\n          </p>\n\n          <img src={`/images/${currentProduct.image}`} alt={currentProduct.name} />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport OrderHistory from './pages/OrderHistory';\nimport Success from './pages/Success';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route exact path=\"/success\" component={Success} />\n            <Route component={NoMatch} />\n          </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}